---
description: This rule file provides best practices and coding standards for using the Plotly library, focusing on code organization, performance, security, testing, and common pitfalls. It aims to guide developers in creating maintainable, efficient, and secure Plotly applications.
globs: **/*.py
---
# Plotly Best Practices and Coding Standards

This document provides comprehensive guidelines for using the Plotly library in Python for AI, ML, data science, and other development contexts. It covers various aspects, including code organization, common patterns, performance considerations, security best practices, testing approaches, common pitfalls, and tooling.

## 1. Code Organization and Structure

### 1.1. Directory Structure Best Practices

Organizing your project with a clear and consistent directory structure enhances maintainability and collaboration. Here's a suggested structure:


project_root/
├── data/
│   ├── raw/
│   ├── processed/
│   └── external/
├── src/
│   ├── visualizations/
│   │   ├── __init__.py
│   │   ├── charts.py  # Contains functions for creating different charts
│   │   ├── layouts.py # Defines layouts and themes
│   │   └── utils.py   # Utility functions for visualizations
│   ├── models/
│   │   ├── __init__.py
│   │   ├── model_training.py
│   │   └── model_evaluation.py
│   ├── data_processing/
│   │   ├── __init__.py
│   │   ├── data_cleaning.py
│   │   └── feature_engineering.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── config.py   # Configuration settings
│   │   └── helpers.py  # General helper functions
│   └── main.py         # Entry point of the application
├── tests/
│   ├── visualizations/
│   ├── models/
│   ├── data_processing/
│   └── conftest.py    # Pytest configuration file
├── notebooks/         # Jupyter notebooks for exploration
├── requirements.txt   # Project dependencies
├── pyproject.toml     # Configuration file for dependencies
└── README.md


*   `data/`: Stores data-related files.
    *   `raw/`: Contains the original, untouched data.
    *   `processed/`: Stores cleaned and transformed data.
    *   `external/`: Includes data from external sources.
*   `src/`: Houses the source code of your application.
    *   `visualizations/`: Contains modules for creating Plotly charts and layouts.
    *   `models/`: Includes modules for training and evaluating machine learning models.
    *   `data_processing/`: Contains modules for data cleaning and feature engineering.
    *   `utils/`: Contains utility modules, such as configuration settings and helper functions.
    *   `main.py`: The entry point of your application.
*   `tests/`: Stores unit tests for different modules.
*   `notebooks/`: Contains Jupyter notebooks for data exploration and prototyping.
*   `requirements.txt`: Lists project dependencies.
*   `README.md`: Provides a high-level overview of the project.

### 1.2. File Naming Conventions

Follow consistent naming conventions for files and directories to improve readability and maintainability:

*   Use lowercase letters for file names.
*   Separate words with underscores (`_`).
*   Be descriptive and concise.

Example:

*   `charts.py`
*   `data_cleaning.py`
*   `feature_engineering.py`
*   `model_training.py`

### 1.3. Module Organization Best Practices

Organize your code into modules based on functionality. For Plotly-specific code, consider the following modules:

*   `charts.py`: Contains functions for creating different types of Plotly charts (e.g., scatter plots, bar charts, line charts).
*   `layouts.py`: Defines layouts and themes for Plotly charts.
*   `utils.py`: Includes utility functions for visualizations, such as data formatting and color palettes.

Example `charts.py`:

python
import plotly.express as px

def create_scatter_plot(df, x_col, y_col, color_col=None, title="Scatter Plot"):
    """Creates a scatter plot using Plotly Express."""
    fig = px.scatter(df, x=x_col, y=y_col, color=color_col, title=title)
    return fig

def create_bar_chart(df, x_col, y_col, color_col=None, title="Bar Chart"):
    """Creates a bar chart using Plotly Express."""
    fig = px.bar(df, x=x_col, y=y_col, color=color_col, title=title)
    return fig

# Add other chart functions here


### 1.4. Component Architecture Recommendations

For larger applications, consider a component-based architecture. This involves breaking down the application into reusable components. Components can be:

*   Chart components: Reusable functions or classes for creating specific types of charts.
*   Layout components: Reusable layouts and themes.
*   Data components: Functions or classes for fetching and processing data.

Example:

python
# visualizations/components.py

import plotly.graph_objects as go

class ScatterPlot:
    def __init__(self, df, x_col, y_col, color_col=None, title="Scatter Plot"):
        self.df = df
        self.x_col = x_col
        self.y_col = y_col
        self.color_col = color_col
        self.title = title

    def create_plot(self):
        fig = go.Figure(data=go.Scatter(x=self.df[self.x_col], y=self.df[self.y_col], mode='markers', marker=dict(color=self.df[self.color_col] if self.color_col else None)))
        fig.update_layout(title=self.title, xaxis_title=self.x_col, yaxis_title=self.y_col)
        return fig


### 1.5. Code Splitting Strategies

For web applications built with Dash, code splitting can improve performance by loading only the necessary code for each page or component. Strategies include:

*   Using Dash's `dcc.Location` component to conditionally render different components based on the URL.
*   Implementing lazy loading for large datasets or complex visualizations.
*   Breaking down your Dash app into multiple files and importing only the necessary components.

## 2. Common Patterns and Anti-patterns

### 2.1. Design Patterns Specific to Plotly

*   **Factory Pattern:** Use a factory function to create different types of charts based on input parameters. This simplifies the creation of charts and promotes code reuse.
*   **Template Method Pattern:** Define a base class for chart components with a template method that outlines the steps for creating a chart. Subclasses can then implement specific steps.
*   **Observer Pattern:** In Dash applications, use the Observer pattern to update charts dynamically based on user interactions or data changes.

### 2.2. Recommended Approaches for Common Tasks

*   **Creating Interactive Charts:** Use `plotly.express` for quick interactive charts. For more control, use `plotly.graph_objects`.
*   **Updating Chart Layouts:** Use `fig.update_layout()` to modify chart titles, axes labels, legends, and annotations.
*   **Handling Large Datasets:** Use techniques like data aggregation, sampling, or WebGL rendering to improve performance.
*   **Creating Dashboards:** Use the Dash framework to build interactive web applications with Plotly charts.

### 2.3. Anti-patterns and Code Smells

*   **Overloading Charts:** Avoid including too much information in a single chart, which can make it difficult to interpret.
*   **Ignoring Performance:** Neglecting to optimize charts for large datasets can lead to slow rendering and poor user experience.
*   **Hardcoding Values:** Avoid hardcoding values in your chart definitions. Use configuration files or environment variables instead.
*   **Not Handling Errors:** Failing to handle errors can lead to unexpected behavior and poor user experience.
*   **Inconsistent Styling:** Ensure consistent styling across all charts in your application.

### 2.4. State Management Best Practices for Plotly Applications (Dash)

*   **Use Dash's `dcc.Store` component:** Store application-wide state in `dcc.Store` components. This allows you to share state between different callbacks.
*   **Avoid Storing Large Datasets in State:** Instead, load data on-demand or use a server-side caching mechanism.
*   **Use Callbacks to Update State:** Only update state in response to user interactions or data changes.
*   **Immutable State Updates:** Treat state as immutable and create new state objects instead of modifying existing ones.

### 2.5. Error Handling Patterns

*   **Use `try-except` Blocks:** Wrap Plotly code in `try-except` blocks to catch potential exceptions, such as data errors or rendering issues.
*   **Log Errors:** Log error messages to a file or console for debugging purposes.
*   **Display User-Friendly Error Messages:** Display informative error messages to the user instead of showing raw exceptions.
*   **Implement Fallback Mechanisms:** Provide fallback mechanisms in case of chart rendering failures, such as displaying a static image or a placeholder message.

## 3. Performance Considerations

### 3.1. Optimization Techniques

*   **Data Aggregation:** Aggregate data to reduce the number of data points displayed in the chart.
*   **Sampling:** Use sampling techniques to reduce the size of large datasets.
*   **WebGL Rendering:** Utilize Plotly's WebGL backend for faster rendering of complex 3D and dense 2D plots. Add `renderer="webgl"` argument in the `show()` function
*   **Caching:** Implement caching mechanisms to store frequently accessed data and reduce the number of database queries or API calls.

### 3.2. Memory Management Considerations

*   **Release Unused Resources:** Ensure that you release any unused resources, such as large datasets or chart objects, to prevent memory leaks.
*   **Use Generators:** Use generators to process large datasets in chunks instead of loading the entire dataset into memory.
*   **Avoid Creating Unnecessary Copies:** Avoid creating unnecessary copies of data objects, as this can consume additional memory.

### 3.3. Rendering Optimization

*   **Reduce Chart Complexity:** Simplify your charts by reducing the number of traces, data points, or annotations.
*   **Use Efficient Data Structures:** Use efficient data structures, such as NumPy arrays or Pandas DataFrames, to store and manipulate data.
*   **Optimize Callback Logic:** Optimize the logic in your Dash callbacks to reduce the amount of time spent processing data or updating charts.

### 3.4. Bundle Size Optimization Strategies

*   **Use a Virtual Environment:** Create a virtual environment for your project to isolate dependencies and reduce the overall bundle size.
*   **Remove Unused Dependencies:** Remove any unused dependencies from your project.
*   **Minify JavaScript and CSS:** Minify JavaScript and CSS files to reduce their size.
*   **Use Code Splitting:** Split your code into multiple bundles and load only the necessary code for each page or component.

### 3.5. Lazy Loading Strategies

*   **Load Data On-Demand:** Load data only when it is needed, such as when a user interacts with a chart or navigates to a new page.
*   **Use Asynchronous Loading:** Use asynchronous loading techniques to load data in the background without blocking the main thread.
*   **Implement Placeholder Content:** Display placeholder content while data is loading to improve the user experience.

## 4. Security Best Practices

### 4.1. Common Vulnerabilities and Prevention

*   **Cross-Site Scripting (XSS):** Prevent XSS attacks by sanitizing user inputs and escaping any data displayed in the charts.
*   **Injection Attacks:** Prevent injection attacks by using parameterized queries or ORM frameworks to interact with databases.
*   **Denial of Service (DoS):** Implement rate limiting and input validation to prevent DoS attacks.

### 4.2. Input Validation

*   **Validate User Inputs:** Validate user inputs to ensure that they conform to the expected format and range.
*   **Sanitize User Inputs:** Sanitize user inputs to remove any potentially malicious code or characters.
*   **Use Whitelisting:** Use whitelisting to allow only specific characters or patterns in user inputs.

### 4.3. Authentication and Authorization

*   **Implement Authentication:** Implement authentication to verify the identity of users accessing your application.
*   **Use Strong Passwords:** Enforce the use of strong passwords and implement password hashing and salting.
*   **Implement Authorization:** Implement authorization to control access to different parts of your application based on user roles or permissions.

### 4.4. Data Protection Strategies

*   **Encrypt Sensitive Data:** Encrypt sensitive data at rest and in transit to protect it from unauthorized access.
*   **Use Secure Protocols:** Use secure protocols, such as HTTPS, to communicate with servers and APIs.
*   **Implement Access Controls:** Implement access controls to restrict access to sensitive data based on user roles or permissions.

### 4.5. Secure API Communication

*   **Use API Keys:** Use API keys to authenticate requests to external APIs.
*   **Validate API Responses:** Validate API responses to ensure that they are in the expected format and do not contain any malicious content.
*   **Implement Rate Limiting:** Implement rate limiting to prevent abuse of your APIs.

## 5. Testing Approaches

### 5.1. Unit Testing

*   **Test Individual Components:** Write unit tests to test individual components of your Plotly code, such as chart functions or layout definitions.
*   **Use Mock Data:** Use mock data to isolate components from external dependencies.
*   **Verify Chart Properties:** Verify that the chart properties, such as titles, axes labels, and data values, are correct.

### 5.2. Integration Testing

*   **Test Interactions Between Components:** Write integration tests to test the interactions between different components of your application.
*   **Use a Test Database:** Use a test database to isolate your tests from the production database.
*   **Verify Data Flow:** Verify that data flows correctly between components.

### 5.3. End-to-End Testing

*   **Test the Entire Application:** Write end-to-end tests to test the entire application from the user's perspective.
*   **Use a Testing Framework:** Use a testing framework, such as Selenium or Cypress, to automate end-to-end tests.
*   **Verify User Interactions:** Verify that user interactions, such as clicking buttons or entering data, produce the expected results.

### 5.4. Test Organization

*   **Organize Tests by Module:** Organize your tests into directories that correspond to the modules in your application.
*   **Use Descriptive Test Names:** Use descriptive test names that clearly indicate what the test is verifying.
*   **Write Clear Assertions:** Write clear assertions that verify the expected results.

### 5.5. Mocking and Stubbing

*   **Use Mock Objects:** Use mock objects to replace external dependencies, such as databases or APIs, with controlled test doubles.
*   **Use Stub Functions:** Use stub functions to replace complex or time-consuming operations with simple, predictable implementations.
*   **Verify Interactions with Mocks:** Verify that your code interacts with mock objects in the expected way.

## 6. Common Pitfalls and Gotchas

### 6.1. Frequent Mistakes

*   **Incorrect Data Formatting:** Ensure that your data is formatted correctly for Plotly charts. For example, ensure that dates are in the correct format and that numerical data is not stored as strings.
*   **Missing Dependencies:** Ensure that all required dependencies are installed.
*   **Incorrect Chart Types:** Choose the correct chart type for your data and the message you want to convey.
*   **Ignoring Layout Customization:** Customize the chart layout to improve readability and visual appeal.

### 6.2. Edge Cases

*   **Handling Missing Data:** Handle missing data gracefully by either removing it from the chart or replacing it with a default value.
*   **Dealing with Outliers:** Deal with outliers appropriately by either removing them from the chart or using a chart type that is less sensitive to outliers, such as a box plot.
*   **Handling Large Numbers:** Handle large numbers by using appropriate formatting and scaling.

### 6.3. Version-Specific Issues

*   **Check Release Notes:** Check the release notes for each Plotly version to be aware of any breaking changes or bug fixes.
*   **Test with Different Versions:** Test your code with different Plotly versions to ensure compatibility.

### 6.4. Compatibility Concerns

*   **Dash Version Compatibility:** Ensure that your Dash version is compatible with your Plotly version.
*   **Browser Compatibility:** Test your charts in different browsers to ensure compatibility.

### 6.5. Debugging Strategies

*   **Use Debugging Tools:** Use debugging tools, such as print statements or a debugger, to identify and fix issues in your code.
*   **Check Error Messages:** Check error messages for clues about what is going wrong.
*   **Simplify the Chart:** Simplify the chart by removing traces or annotations to isolate the issue.

## 7. Tooling and Environment

### 7.1. Recommended Development Tools

*   **VS Code:** A popular code editor with excellent support for Python and Plotly.
*   **Jupyter Notebook:** An interactive environment for data exploration and prototyping.
*   **PyCharm:** A full-featured IDE for Python development.
*   **Dash Enterprise:** A platform for deploying and managing Dash applications.

### 7.2. Build Configuration Best Practices

*   **Use a Virtual Environment:** Create a virtual environment for your project to isolate dependencies.
*   **Use a Dependency Manager:** Use a dependency manager, such as pip or poetry, to manage project dependencies.
*   **Specify Dependencies:** Specify the exact versions of your dependencies in your `requirements.txt` or `pyproject.toml` file.

### 7.3. Linting and Formatting

*   **Use a Linter:** Use a linter, such as pylint or flake8, to identify and fix code style issues.
*   **Use a Formatter:** Use a formatter, such as black or autopep8, to automatically format your code according to a consistent style.
*   **Configure Your Editor:** Configure your editor to automatically run the linter and formatter when you save your code.

### 7.4. Deployment Best Practices

*   **Use a Production Environment:** Deploy your application to a production environment that is separate from your development environment.
*   **Use a Web Server:** Use a web server, such as nginx or Apache, to serve your application.
*   **Use a Process Manager:** Use a process manager, such as gunicorn or uwsgi, to manage your application processes.

### 7.5. CI/CD Integration Strategies

*   **Use a CI/CD Pipeline:** Use a CI/CD pipeline, such as Jenkins or GitHub Actions, to automate the build, test, and deployment process.
*   **Run Tests Automatically:** Run tests automatically as part of the CI/CD pipeline.
*   **Deploy Automatically:** Deploy your application automatically to the production environment when all tests pass.

By following these best practices and coding standards, you can create maintainable, efficient, and secure Plotly applications that meet the needs of your users and stakeholders.