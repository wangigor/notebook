---
description: 
globs: 
alwaysApply: true
---
# 知识库Agent系统开发规范

## 一、代码风格与组织

### 后端代码风格（Python）

1. **遵循Python PEP 8风格指南**
   - 使用4个空格进行缩进
   - 行长度限制在88个字符以内（与black格式化工具兼容）
   - 类名使用驼峰命名（如`UserManager`）
   - 函数和变量使用下划线命名（如`get_user_data`）
   - 模块级常量使用全大写（如`MAX_RETRY_COUNT`）

2. **项目结构组织**
   - 采用功能模块化结构，每个模块作为独立的包
   - 将业务逻辑、数据访问、API路由分离
   - 示例结构：
     ```
     app/
     ├── api/             # API路由和端点
     ├── core/            # 核心配置和启动代码
     ├── models/          # 数据模型
     ├── services/        # 业务逻辑服务
     ├── schemas/         # Pydantic模型/schemas
     ├── utils/           # 通用工具函数
     └── agent/           # LangGraph相关Agent代码
     ```

### 前端代码风格（TypeScript/JavaScript）

1. **遵循TypeScript规范**
   - 使用2个空格进行缩进
   - 组件名称使用PascalCase（如`UserProfile`）
   - 变量和函数使用camelCase（如`getUserData`）
   - 使用类型注解提升代码可靠性

2. **项目结构组织**
   - 按功能或特性组织组件
   - 共享组件、hooks和工具函数分离
   - 示例结构：
     ```
     src/
     ├── components/      # 可复用组件
     │   ├── common/      # 通用UI组件
     │   └── features/    # 特定功能组件
     ├── hooks/           # 自定义React钩子
     ├── pages/           # 页面组件
     ├── services/        # API服务
     ├── store/           # 状态管理
     ├── styles/          # 全局样式
     └── utils/           # 工具函数
     ```

## 二、软件设计与架构原则

1. **软件开发设计原则**
   - **SOLID原则**
     - **单一职责原则（SRP）**：一个类应该只有一个引起它变化的原因
     - **开闭原则（OCP）**：软件实体应该对扩展开放，对修改关闭
     - **里氏替换原则（LSP）**：子类型必须能够替换其基类型
     - **接口隔离原则（ISP）**：客户端不应该依赖它不需要的接口
     - **依赖倒置原则（DIP）**：高层模块不应该依赖低层模块，两者都应该依赖抽象
   
   - **DRY原则（Don't Repeat Yourself）**
     - 避免代码重复，提取共享逻辑到可复用组件
     - 一次且仅一次原则：任何知识点在系统中都应该有一个唯一、明确、权威的表示
   
   - **KISS原则（Keep It Simple, Stupid）**
     - 保持设计和实现的简单性
     - 避免不必要的复杂性和过度设计
   
   - **YAGNI原则（You Aren't Gonna Need It）**
     - 不要实现当前不需要的功能
     - 专注于满足当前需求，避免过度设计
   
   - **关注点分离**
     - 将不同职责的代码分离到不同模块
     - 保持界面、业务逻辑和数据访问的分离
   
   - **最小知识原则（德米特法则）**
     - 一个对象应该对其他对象有最少的了解
     - 减少组件间的耦合度
   
   - **组合优于继承**
     - 优先使用组合而非继承来实现代码复用
     - 避免深层继承层次导致的复杂性
   
   - **设计模式应用**
     - 合理使用常见设计模式解决特定问题
     - 避免过度使用设计模式导致的复杂性
   
   - **防御性编程**
     - 预期并处理可能的错误和异常情况
     - 验证输入参数和前置条件
   
   - **错误处理策略**
     - 统一的错误处理机制
     - 明确的错误传播策略和恢复机制

2. **微服务设计原则**
   - 后端服务按领域模型分离，每个服务职责单一
   - 服务间通过明确定义的API通信
   - 避免服务间的紧耦合，保持独立可部署

3. **应用12-Factor原则**
   - **基准代码**：使用Git作为版本控制，一个仓库包含前后端代码
   - **依赖管理**：明确声明依赖，后端使用requirements.txt，前端使用package.json
   - **配置**：通过环境变量管理配置，不在代码中硬编码
   - **后端服务**：数据库、缓存等作为附加资源，通过配置连接
   - **构建、发布、运行**：分离构建和运行阶段，使用CI/CD管道
   - **进程**：设计为无状态服务，便于水平扩展
   - **端口绑定**：服务通过端口暴露API
   - **并发**：通过增加进程实例来扩展
   - **易处理**：设计快速启动和优雅关闭的服务
   - **环境等价**：开发、测试和生产环境配置保持一致
   - **日志**：集中收集日志，视为事件流
   - **管理进程**：将数据库迁移等管理任务作为一次性进程运行

4. **API设计原则**
   - 采用RESTful API设计
   - 统一响应格式，包含状态码、消息和数据
   - 使用版本控制（如`/api/v1/`）
   - 详细的错误信息与状态码匹配

## 三、数据模型与状态管理

1. **后端数据模型**
   - 使用SQLAlchemy ORM进行数据库操作
   - 明确定义模型关系和约束
   - 使用迁移工具管理数据库变更

2. **前端状态管理**
   - 使用React Context和hooks管理局部状态
   - 复杂状态考虑使用Redux或Zustand
   - 将API调用与状态管理分离

## 四、开发流程规范

1. **版本控制与分支策略**
   - 主分支（main/master）始终保持可部署状态
   - 特性开发使用功能分支（feature/xx）
   - 修复使用修复分支（bugfix/xx）
   - 使用语义化版本号（Semantic Versioning）

2. **代码评审流程**
   - 所有代码变更通过Pull Request提交
   - 至少需要一位团队成员审核通过
   - 使用自动化工具进行代码质量检查
   - 评审关注点：功能性、代码质量、测试覆盖率、文档

3. **持续集成与部署**
   - 自动化测试、构建和部署
   - 部署前进行代码质量和安全检查
   - 支持快速回滚机制

## 五、测试规范

1. **后端测试**
   - 单元测试：使用pytest，覆盖核心业务逻辑
   - 集成测试：测试API端点和服务交互
   - 测试覆盖率目标：至少80%

2. **前端测试**
   - 组件测试：使用React Testing Library
   - 端到端测试：使用Cypress或Playwright
   - 重点测试关键用户流程

3. **性能与负载测试**
   - 使用JMeter或Locust进行API负载测试
   - 设定性能指标并定期监测

## 六、文档规范

1. **代码文档**
   - 使用docstring记录函数和类的用途、参数和返回值
   - 复杂逻辑需添加内联注释
   - 使用工具自动生成API文档

2. **项目文档**
   - README包含项目概述、安装步骤和基本用法
   - 架构文档说明系统设计和组件交互
   - API文档详细记录所有端点、参数和响应

3. **用户文档**
   - 针对最终用户的操作指南
   - 常见问题解答

## 七、安全规范

1. **认证与授权**
   - 使用JWT或OAuth2进行用户认证
   - 基于角色的访问控制（RBAC）
   - 定期更新密钥和凭证

2. **数据保护**
   - 敏感数据加密存储
   - API通信使用HTTPS
   - 遵循最小权限原则

3. **漏洞防护**
   - 定期进行依赖更新，修复已知漏洞
   - 防止常见的安全问题（SQL注入、XSS等）
   - 定期安全审计

## 八、日志与监控

1. **日志规范**
   - 统一日志格式，包含时间戳、级别、组件和消息
   - 区分不同级别的日志（INFO、WARNING、ERROR）
   - 避免记录敏感信息

2. **监控指标**
   - 系统健康指标：CPU、内存、磁盘使用率
   - 应用指标：请求量、响应时间、错误率
   - 业务指标：活跃用户、功能使用情况

## 九、AI与LangGraph相关规范

1. **提示工程规范**
   - 标准化提示模板设计
   - 版本控制提示内容
   - 提示效果测试和优化

2. **LangGraph工作流设计**
   - 明确定义Agent功能和边界
   - 工作流可视化文档
   - 错误处理和恢复机制

3. **模型评估与监控**
   - 定期评估模型性能
   - 监控与记录模型响应质量
   - 用户反馈收集与改进
