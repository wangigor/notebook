---
description: This rule outlines the best practices and coding standards for developing and deploying applications on the Railway platform, covering aspects from code organization to security and performance.
globs: **/*.{js,jsx,ts,tsx,py,go,java,rs,c,cpp,cs,html,css,yml,yaml,json,sh}
---
# Railway Best Practices and Coding Standards

This document provides a comprehensive guide to best practices for developing and deploying applications on the Railway platform. Following these guidelines ensures optimized, secure, and maintainable deployments.

## 1. Code Organization and Structure

### 1.1. Directory Structure

*   **Project Root:** Contains the `railway.toml` (or `railway.json`) file defining the project configuration, README, LICENSE, and other top-level files.
*   **src/:**  Holds the source code of the application. Further divided into modules and components.
*   **config/:** Stores configuration files for different environments (development, staging, production). Use environment variables within Railway for sensitive data.
*   **scripts/:** Contains utility scripts for build, deployment, and maintenance tasks.
*   **tests/:** Includes unit, integration, and end-to-end tests.
*   **docs/:** Holds project documentation, API specifications, and other relevant documentation.

Example:


my-railway-app/
├── railway.toml
├── README.md
├── LICENSE
├── src/
│   ├── components/
│   │   ├── Button.js
│   │   └── Input.js
│   ├── modules/
│   │   ├── auth.js
│   │   └── data.js
│   ├── app.js
│   └── index.js
├── config/
│   ├── development.js
│   └── production.js
├── scripts/
│   ├── build.sh
│   └── deploy.sh
├── tests/
│   ├── unit/
│   ├── integration/
│   └── e2e/
└── docs/


### 1.2. File Naming Conventions

*   **Source Code:** Use descriptive and consistent naming conventions (e.g., `ComponentName.js`, `moduleName.ts`).
*   **Configuration Files:** Name configuration files according to their environment (e.g., `development.json`, `production.yml`).
*   **Test Files:**  Follow a naming convention that clearly identifies the tested component or module (e.g., `ComponentName.test.js`, `moduleName.spec.ts`).

### 1.3. Module Organization

*   **Functional Grouping:** Organize modules based on their functionality (e.g., authentication, data fetching, UI components).
*   **Loose Coupling:**  Design modules to be loosely coupled, minimizing dependencies between them.
*   **Clear Interfaces:** Define clear and well-documented interfaces for each module.
*   **Avoid Circular Dependencies:** Prevent circular dependencies between modules to improve maintainability.

### 1.4. Component Architecture

*   **Component-Based Approach:** Break down the application into reusable components.
*   **Single Responsibility Principle:** Each component should have a single, well-defined responsibility.
*   **Presentational and Container Components:** Separate presentational components (UI) from container components (logic and data fetching).
*   **Props and State Management:** Use props for passing data down the component tree and manage state appropriately (using libraries like Redux, Zustand or React Context where necessary).

### 1.5. Code Splitting Strategies

*   **Route-Based Splitting:** Split the application based on routes, loading only the necessary components and modules for each route.
*   **Component-Based Splitting:**  Split large components into smaller chunks, loading them on demand.
*   **Dynamic Imports:** Use dynamic imports (`import()`) to load modules and components asynchronously.
*   **Webpack/Parcel Configuration:** Configure your bundler (Webpack, Parcel, etc.) to optimize code splitting and chunking.

## 2. Common Patterns and Anti-patterns

### 2.1. Design Patterns

*   **Dependency Injection:**  Use dependency injection to manage dependencies and improve testability.
*   **Observer Pattern:**  Implement the observer pattern for handling events and notifications.
*   **Singleton Pattern:** Use the singleton pattern sparingly, only when a single instance of a class is truly required.
*   **Factory Pattern:** Utilize factory patterns to abstract object creation.

### 2.2. Recommended Approaches

*   **Environment Variables:** Utilize Railway's environment variables for configuration and secrets management.  Access them in your application using appropriate methods for your language (e.g., `process.env` in Node.js, `os.environ` in Python).
*   **Private Networking:**  Use Railway's private networking to ensure secure and efficient communication between services within the same project and environment using the `RAILWAY_PRIVATE_DOMAIN` environment variable.
*   **Reference Variables:** Use Railway's reference variables to dynamically reference other variables, either from a variable set on the current service or from another service in the same project using the `${{serviceName.VARIABLE_NAME}}` syntax, keeping your variable values in sync and avoiding hardcoding.
*   **Config as Code:** Utilize Railway's config as code feature to maintain your Railway configuration in a JSON or TOML file, enabling you to keep track of changes just as you do with your source code.

### 2.3. Anti-patterns

*   **Hardcoding Secrets:** Avoid hardcoding secrets or API keys in your code. Use environment variables instead.
*   **Ignoring Errors:**  Don't ignore errors or exceptions. Implement proper error handling and logging.
*   **Over-Engineering:** Avoid over-engineering solutions. Keep the code simple and maintainable.
*   **Tight Coupling:** Minimize dependencies between modules and components.
*   **Long-Lived Branches:**  Avoid creating long-lived branches. Use feature branches and merge them frequently.

### 2.4. State Management

*   **Local State:** Use component-level state for simple UI-related state.
*   **Context API (React):**  Use the Context API for sharing state between components within a subtree.
*   **State Management Libraries (Redux, Zustand, Recoil):** Use state management libraries for complex application state and predictable state updates.
*   **Immutable Data Structures:**  Use immutable data structures to prevent accidental state mutations.

### 2.5. Error Handling

*   **Try-Catch Blocks:** Use `try-catch` blocks to handle exceptions gracefully.
*   **Error Boundaries (React):** Use error boundaries to catch errors during rendering and prevent the entire application from crashing.
*   **Centralized Error Handling:** Implement a centralized error handling mechanism for logging errors and displaying user-friendly messages.
*   **Asynchronous Error Handling:** Handle errors in asynchronous operations (e.g., Promises) using `.catch()` or `async/await` with `try-catch`.

## 3. Performance Considerations

### 3.1. Optimization Techniques

*   **Code Optimization:** Optimize code for performance (e.g., minimizing DOM manipulations, using efficient algorithms).
*   **Caching:** Implement caching mechanisms to reduce server load and improve response times. Use Railway environment variables to configure cache TTLs.
*   **Database Optimization:** Optimize database queries and indexing for faster data retrieval. Select database types that optimize well with Railway. Consider a database cluster for production workloads.
*   **Image Optimization:** Optimize images for web delivery (e.g., compressing images, using appropriate formats).
*   **Gzip Compression:**  Enable Gzip compression to reduce the size of transferred data.

### 3.2. Memory Management

*   **Memory Leaks:**  Identify and fix memory leaks in your code.  Use memory profiling tools to detect leaks.
*   **Garbage Collection:**  Understand how garbage collection works in your language and optimize memory usage accordingly.  Ensure resources are properly released and terminated.
*   **Large Data Structures:** Avoid loading large data structures into memory unnecessarily.  Use streaming or pagination techniques.

### 3.3. Rendering Optimization (If Applicable)

*   **Virtual DOM (React):**  Take advantage of the virtual DOM in frameworks like React to minimize DOM updates.
*   **Memoization:** Use memoization techniques to prevent unnecessary re-renders.
*   **Code Splitting:** Split code into smaller chunks to reduce initial load time.

### 3.4. Bundle Size Optimization

*   **Dead Code Elimination:**  Eliminate dead code and unused dependencies using tools like Webpack's tree shaking.
*   **Minification:**  Minify code to reduce its size.
*   **Dependency Optimization:**  Optimize dependencies by using smaller alternatives or by importing only the necessary parts of a library.

### 3.5. Lazy Loading

*   **Route-Based Lazy Loading:**  Lazy load routes to improve initial load time.
*   **Component-Based Lazy Loading:** Lazy load components that are not immediately visible or necessary.
*   **Intersection Observer:** Use the Intersection Observer API to lazy load images and other resources when they come into view.

## 4. Security Best Practices

### 4.1. Common Vulnerabilities

*   **SQL Injection:**  Prevent SQL injection by using parameterized queries or ORM libraries.
*   **Cross-Site Scripting (XSS):**  Prevent XSS by sanitizing user inputs and escaping outputs.
*   **Cross-Site Request Forgery (CSRF):**  Prevent CSRF by using anti-CSRF tokens.
*   **Authentication and Authorization Vulnerabilities:** Implement secure authentication and authorization mechanisms.
*   **Dependency Vulnerabilities:**  Keep dependencies up to date to address known vulnerabilities.

### 4.2. Input Validation

*   **Server-Side Validation:**  Validate all user inputs on the server-side.
*   **Whitelisting:** Use whitelisting to allow only valid inputs.
*   **Sanitization:** Sanitize user inputs to remove potentially harmful characters.
*   **Regular Expressions:** Use regular expressions to validate input formats.

### 4.3. Authentication and Authorization

*   **Secure Password Storage:**  Use strong hashing algorithms (e.g., bcrypt, Argon2) to store passwords securely.
*   **Multi-Factor Authentication (MFA):** Implement MFA for enhanced security.
*   **Role-Based Access Control (RBAC):**  Implement RBAC to control access to resources based on user roles.
*   **JSON Web Tokens (JWT):**  Use JWT for stateless authentication.

### 4.4. Data Protection

*   **Encryption:**  Encrypt sensitive data at rest and in transit.
*   **Data Masking:** Mask sensitive data in logs and reports.
*   **Regular Backups:**  Create regular backups of your data to prevent data loss. Use Railway's volume and backup features.
*   **Data Minimization:** Only store the data that is necessary.

### 4.5. Secure API Communication

*   **HTTPS:**  Use HTTPS for all API communication.
*   **API Keys:** Protect API keys and other sensitive credentials.
*   **Rate Limiting:** Implement rate limiting to prevent abuse.
*   **Input Validation:** Validate all API requests.
*   **Output Encoding:** Encode API responses to prevent injection attacks.
*   **Private Networking:** Use private networking to protect your services from malicious threats by keeping them unexposed to the public network. Secure communication between services in the same project and environment.

## 5. Testing Approaches

### 5.1. Unit Testing

*   **Test-Driven Development (TDD):**  Write tests before writing code.
*   **Component Isolation:**  Isolate components during unit testing.
*   **Mocking Dependencies:** Mock dependencies to control the behavior of external systems.
*   **Code Coverage:**  Aim for high code coverage.

### 5.2. Integration Testing

*   **Integration with External Systems:**  Test the integration between different components and external systems.
*   **Database Integration:**  Test database interactions.
*   **API Integration:** Test API endpoints.

### 5.3. End-to-End Testing

*   **User Flows:** Test complete user flows to ensure that the application works as expected.
*   **Browser Automation:**  Use browser automation tools (e.g., Selenium, Cypress) to simulate user interactions.
*   **Environment Parity:** Run end-to-end tests in an environment that closely resembles production.

### 5.4. Test Organization

*   **Test Suites:** Organize tests into logical test suites.
*   **Test Naming Conventions:**  Use consistent test naming conventions.
*   **Test Documentation:**  Document tests to explain their purpose and expected behavior.

### 5.5. Mocking and Stubbing

*   **Mocking External Services:**  Mock external services (e.g., APIs, databases) to control their behavior during testing.
*   **Stubbing Functions:**  Stub functions to replace their implementation with a predefined behavior.
*   **Mocking Libraries:** Use mocking libraries (e.g., Jest, Mocha) to simplify the mocking process.

## 6. Common Pitfalls and Gotchas

### 6.1. Frequent Mistakes

*   **Incorrect Environment Variable Configuration:**  Ensure that environment variables are correctly configured and accessible in your application.
*   **Failing to Configure Restart Policies:** Configure your services' restart policy to mitigate performance degradation and user impact when a service crashes.
*   **Not Utilizing Private Networking:**  Make sure to use private networking for faster networking along with no egress fees for service-to-service communication within a project.
*   **Ignoring Asynchronous Operations:**  Handle asynchronous operations correctly to prevent race conditions and unexpected behavior.
*   **Overlooking Security Vulnerabilities:**  Stay informed about common security vulnerabilities and take steps to mitigate them.

### 6.2. Edge Cases

*   **Handling Edge Cases:**  Consider and handle edge cases in your code.
*   **Input Validation:**  Validate all user inputs to prevent unexpected behavior.
*   **Error Handling:**  Handle errors gracefully to prevent application crashes.

### 6.3. Version-Specific Issues

*   **Compatibility Issues:** Be aware of compatibility issues between different versions of Railway and its dependencies.
*   **Breaking Changes:**  Stay informed about breaking changes in Railway releases and update your code accordingly.

### 6.4. Compatibility Concerns

*   **Dependency Conflicts:**  Resolve dependency conflicts between Railway and other technologies.
*   **Integration Issues:**  Address integration issues between Railway and other services.

### 6.5. Debugging Strategies

*   **Logging:** Use logging to track the execution flow and identify potential issues.
*   **Debugging Tools:** Use debugging tools to step through your code and inspect variables.
*   **Remote Debugging:**  Use remote debugging to debug applications running on Railway servers.
*   **Log Explorer:** Familiarize yourself with the Log Explorer so you can query logs across all of your services in one place.

## 7. Tooling and Environment

### 7.1. Recommended Development Tools

*   **IDE (Integrated Development Environment):**  Use a suitable IDE (e.g., VS Code, IntelliJ IDEA) with appropriate extensions for your language.
*   **CLI (Command-Line Interface):**  Use the Railway CLI for managing your Railway projects and services.
*   **Version Control System (Git):**  Use Git for version control.

### 7.2. Build Configuration

*   **Build Scripts:**  Define build scripts in your `package.json` (Node.js) or equivalent file.
*   **Dependency Management:**  Use a dependency management tool (e.g., npm, yarn, pip, maven) to manage dependencies.
*   **Configuration Management:**  Use configuration management tools to manage configuration files across different environments.

### 7.3. Linting and Formatting

*   **Linters:**  Use linters (e.g., ESLint, Pylint) to enforce code style and identify potential errors.
*   **Formatters:**  Use formatters (e.g., Prettier, Black) to automatically format your code.
*   **Editor Integration:**  Integrate linters and formatters with your editor to provide real-time feedback.

### 7.4. Deployment Best Practices

*   **Automated Deployments:**  Automate the deployment process using CI/CD pipelines.
*   **Zero-Downtime Deployments:**  Implement zero-downtime deployments to minimize downtime during deployments.  (Consider using blue-green deployments or rolling updates).
*   **Rollbacks:** Implement a rollback strategy to quickly revert to a previous deployment in case of issues.  Be sure to check out the deployment rollback feature, in case you need to rollback to a previous deployment.
*   **Check Suites:** Enable check suites to have Railway wait for your GitHub workflows to complete successfully before triggering a deployment.

### 7.5. CI/CD Integration

*   **CI/CD Pipelines:**  Set up CI/CD pipelines to automatically build, test, and deploy your application.
*   **GitHub Actions:**  Use GitHub Actions for CI/CD.
*   **GitLab CI:** Use GitLab CI for CI/CD.
*   **Environment Variables:** Use environment variables to configure the CI/CD pipeline.
*   **Webhooks and Email Notifications:** Setup webhooks and email notifications to be alerted if the deployment status of your services change.

By adhering to these best practices, you can develop and deploy robust, scalable, and secure applications on the Railway platform.